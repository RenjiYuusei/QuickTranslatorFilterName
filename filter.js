/**
 * Tool l·ªçc h·ªç t√™n nh√¢n v·∫≠t t·ª´ t·ªáp tin vƒÉn b·∫£n
 * H·ªó tr·ª£ cho QuickTranslate - TangThuVien
 * Phi√™n b·∫£n: 1.6.0
 * T√°c gi·∫£: ƒêo√†n ƒê√¨nh Ho√†ng
 * Li√™n h·ªá: daoluc.yy@gmail.com
 * C·∫≠p nh·∫≠t: 29/12/2024
 * !!! C·∫¢NH B√ÅO !!!
 * ƒêo·∫°n code b√™n d∆∞·ªõi ph·∫ßn config r·∫•t quan tr·ªçng,
 * n·∫øu kh√¥ng bi·∫øt code xin ƒë·ª´ng ch·ªânh s·ª≠a v√¨ s·∫Ω g√¢y l·ªói tool.
 * Ch·ªâ ch·ªânh s·ª≠a ph·∫ßn config n·∫øu c·∫ßn thi·∫øt.
 */

const fs = require('fs');
const path = require('path');
const startTime = Date.now();
const runtime = typeof Bun !== 'undefined' ? 'Bun' : 'Node.js';

const config = {
	inputFile: 'result_TheoT·∫ßnSu·∫•t_Vi·∫øtHoa.txt', // File ƒë·∫ßu v√†o
	outputFile: 'result_T√™nNh√¢nV·∫≠t.txt', // File ƒë·∫ßu ra
	namesFile: 'Names.txt', // File t√™n ƒë√£ t·ªìn t·∫°i
	encoding: 'utf8', // ƒê·ªãnh d·∫°ng file
	minLength: 2, // ƒê·ªô d√†i t·ªëi thi·ªÉu c·ªßa t√™n
	maxLength: 3, // ƒê·ªô d√†i t·ªëi ƒëa c·ªßa t√™n (t·ªëi ƒëa 3 k√Ω t·ª±)
	familyNamesFile: 'data/familyNames.json', // File h·ªç t√™n
	blacklistFile: 'data/blacklist.json', // File blacklist
};

async function readFile(filePath) {
	try {
		if (!fs.existsSync(filePath)) {
			throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${filePath}`);
		}

		const content = fs.readFileSync(filePath, config.encoding);
		return content;
	} catch (err) {
		logError(err);
		console.log('‚ùå L·ªói khi ƒë·ªçc file:', err.message);
		process.exit(1);
	}
}

async function readJsonFile(filePath) {
	try {
		if (!fs.existsSync(filePath)) {
			throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${filePath}`);
		}

		const content = fs.readFileSync(filePath, config.encoding);
		return JSON.parse(content);
	} catch (err) {
		logError(err);
		console.log(`‚ùå L·ªói khi ƒë·ªçc file ${filePath}:`, err.message);
		process.exit(1);
	}
}

async function writeFile(filePath, content) {
	try {
		const dir = path.dirname(filePath);
		if (!fs.existsSync(dir)) {
			fs.mkdirSync(dir, { recursive: true });
		}
		fs.writeFileSync(filePath, content, config.encoding);
	} catch (err) {
		logError(err);
		console.log('‚ùå L·ªói khi ghi file:', err.message);
	}
}

function filter_character_names(content) {
	if (!content || typeof content !== 'string') {
		throw new Error('D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá');
	}

	// ƒê·ªçc blacklist
	let blacklist = [];
	try {
		const blacklistData = fs.readFileSync(config.blacklistFile, config.encoding);
		const blacklistJson = JSON.parse(blacklistData);
		blacklist = blacklistJson.blacklistWords || [];
	} catch (err) {
		console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc blacklist, ti·∫øp t·ª•c v·ªõi danh s√°ch tr·ªëng');
	}

	const lines = content.split('\n');
	const names = [];
	const stats = { total: 0, valid: 0, invalid: 0 };

	// ƒê·ªçc Names.txt n·∫øu t·ªìn t·∫°i
	let existingNames = new Set();
	try {
		if (fs.existsSync(config.namesFile)) {
			const namesContent = fs.readFileSync(config.namesFile, config.encoding);
			if (namesContent.trim()) {
				existingNames = new Set(
					namesContent.split('\n').map(line => {
						const parts = line.split('=');
						return parts[0]?.trim() || '';
					})
				);
			} else {
				console.log('‚ö†Ô∏è File Names.txt r·ªóng');
			}
		} else {
			console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file Names.txt ho·∫∑c file r·ªóng');
		}
	} catch (err) {
		console.log('‚ö†Ô∏è L·ªói khi ƒë·ªçc Names.txt:', err.message);
	}

	for (const line of lines) {
		stats.total++;
		const parts = line.split('=');
		if (parts.length !== 2) {
			stats.invalid++;
			continue;
		}

		const hanViet = parts[0].trim();
		const name = parts[1].trim();

		// Ki·ªÉm tra ƒëi·ªÅu ki·ªán
		if (!hanViet || !name || name.length < config.minLength || name.length > config.maxLength || blacklist.some(word => name.includes(word)) || existingNames.has(hanViet)) {
			stats.invalid++;
			continue;
		}

		names.push({ hanViet, name });
		stats.valid++;
	}

	return { names, stats };
}

function logError(err) {
	console.error('üî• L·ªói:', err);
}

async function main() {
	console.log(`üöÄ ƒêang ch·∫°y v·ªõi: ${runtime}`);
	console.log('üîÑ ƒêang x·ª≠ l√Ω...');

	try {
		const content = await readFile(config.inputFile);
		const result = filter_character_names(content);

		const output = result.names.map(item => `${item.hanViet}=${item.name}`).join('\n');
		await writeFile(config.outputFile, output);

		const endTime = Date.now();
		const executionTime = (endTime - startTime) / 1000;

		console.log('\nüìä K·∫øt qu·∫£:');
		console.log(`‚úì T·ªïng s·ªë d√≤ng: ${result.stats.total}`);
		console.log(`‚úì H·ª£p l·ªá: ${result.stats.valid}`);
		console.log(`‚úì Kh√¥ng h·ª£p l·ªá: ${result.stats.invalid}`);
		console.log(`\n‚ú® ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: ${config.outputFile}`);
		console.log(`‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: ${executionTime.toFixed(3)} gi√¢y\n`);
	} catch (err) {
		logError(err);
		console.log(`‚ùå L·ªói: ${err.message}`);
		process.exit(1);
	}
}

main().catch(err => {
	logError(err);
	console.log(`‚ùå L·ªói: ${err.message}`);
	process.exit(1);
});
